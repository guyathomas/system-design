Part 1 - Clones
- Each server is required to be identical
- Pushing updates to all servers can be tricky
- Sessions need to be stored in a centralized data store which is accessible to all applications servers

Part 2 - Databases
- Path 1: Write to the master and read from the slaves and keep upping the resources (RAM and HDD space) until sharding or denormalization can help a bit or:
- Path 2: Denormalize and don't include any joins in a database query. Chose a NoSQL DB like Mongo for easier scaling. Joins now need to be done in application code. Eventually a cache will need to be introduced.


Part 3 - Cache
- There are two main patterns for caching data
	- Cached database queries
		- Whenever querying the database, store the result in cache.
		- Expiration is an issue. When data in the table changes you need to delete all of the cached items which may have included that cell
	- Cached objects
		- Let your class assemble a dataset from your database and then store the complete instance of the class or the assembed dataset in the cache.
		- In general, see your data as an object like you already do in your code (classes, instances, etc.). Let your class assemble a dataset from your database and then store the complete instance of the class or the assembed dataset in the cache. You have, for example, a class called “Product” which has a property called “data”. It is an array containing prices, texts, pictures, and customer reviews of your product. The property “data” is filled by several methods in the class doing several database requests which are hard to cache, since many things relate to each other. Now, do the following: when your class has finished the “assembling” of the data array, directly store the data array, or better yet the complete instance of the class, in the cache! This allows you to easily get rid of the object whenever something did change and makes the overall operation of your code faster and more logical.

Part 4 - Asynchronism
- Async #1
	- Like a bakery that bakes all the bread the night before and then serves up bread the next day
	- You prerender the HTML files and store them statially so that all that needs to be done is to serve that file
- Async #2
	- A bakery that recieves a special order (like writing on it) and then tells the customer to come back the next day.
	- A frontend action puts tasks into a queue (while singalling to the user that the item has been put in a queue). Workers constantly check the queue for new jobs, if the worker completes a job it sends the signal that the job is done, so the server can notify the client.
